def sql_course():
  sql = [
{'title':'Introduction to SQL','description':'Brief Overview of Database and SQL','content':['What is a database, you may ask. A database is a collection of related data organised for storage and easy access by an authorised user.', 'It is important to have a database or some form of storage system when developing softwares because it will add more meaning to your software. Assuming your social media softwares does not have any database, think about it. This means you would have to create an account again and again whenever you want to use those softwares and you as the user will definitely get frustrated and leave the platform for good, isn\'t that right?', 'Now you know the importance of a database when developing.','SQL is an acronym for Structured Query Language. For this course, you will learn how to create an SQL database and do some cool operations on them.', 'A block of code in SQL is called a QUERY. Remember, SQL is not a programming language, it is a query language used to write database queries. Without much to say, lets jump right into it!']},
{'title': 'Tables in SQL', 'description':'Tables, Rows and Columns', 'content':['Tables are used in storing and organising data in a database.','A table comprises of rows and columns. While a row is the horizontal arrangement of data in the table, a column is the vertical arrangement of data in a table.' ]},
{'title':'Data Types in SQL','description':'Text and Integers', 'content':['With your knowledge in python, you recall that the four main data types are string, int, float and boolean. Good enough that you remember them, but in SQL, there are only three data types which are Text(which holds letters), Integer(which holds whole numbers) and Real(which holds fractions or decimal numbers). When ever you create an SQL Table, you must indicate the type of data that each column will hold.','Just understand the types of SQL data for now and the rest will make sense later.']},

{'title':'Creating a Database', 'description':'Creating an SQL database and table', 'content':['Before creating a database, we have to write some SQL commands to get the job done.','Lets say I want to create a table called Results that will hold students id, names and their score in exams. As a python developer, you can already guess the appropriate data types for each of the headings(column).' , 'Example code: ','Create Table Results(Id INTEGER, Name TEXT, Score INTEGER)', 'The SQL query above creates a table named \'Results\' with the columns: Id(which its data type is Integer), Name(which its data type is Text) and Score(which its data type is Integer)', 'Before we continue, do have in mind that SQL is CASE-INSENSITIVE meaning CREATE, create and Create are the same thing in SQL. So when writing any of the SQL commands, it doesn\'t matter if everything is in upper case or not, it is still correct.']},
{'title':'Inserting into a database', 'description':'Inserting values into the table','content':['Of course we can\'t just create a table and leave it empty, we have to insert some data into the table. Below is the query for that','Code Examples: ','INSERT INTO Results(Id, Name, Score) VALUES(1, Sam, 86)', 'In the query above, I intentionally wrote the commands in uppercase letters because it won\'t throw an error(again SQL is case-insensitive).', 'Basically, what is happening in the query is that we are inserting into our table(Results), then we write out the columns in the Results table which are(Id, Name, Score) in the same order as when the table was created. Then we give a space and use the VALUES command and write the values(1, Sam, 86) following the same order and make sure you do not write an Integer value where you are supposed to write a TEXT value as it will throw an error.']},
{'title':'Deleting from a Database', 'description':'Deleting Values in the table, Where clause, Specifiers', 'content':['Lets say I added two more rows to the Results table: ','INSERT INTO Results(Id, Name, Score) VALUES(2, Mark, 56)','INSERT INTO Results(Id, Name, Score) VALUES(3, Kimberly, 72)', 'For some reason, your boss tells you to delete, Mark from the Results table that he had changed school or he had relocated.','Very easy! This is where you will see the use of the Where clause.','Code Examples: ','Delete * From Results Where Id=2', 'First, we use the delete command and then we set a specifier. A specifier indicates an element of the table that is to be operated. Here, the specifier is \'*\' which stands for all/everything(as you have been using in python when importing). With the * specifier, we are saying, Delete everything from the table WHERE Id=2. We know very well that Mark\'s Id is 2, so we are deleting everything in the row that has an Id of 2(which is Mark\'s row)','One important thing to note in database querying is that if we do not include the WHERE clause or command, the query will delete all the data in the row or table as the case may be and we do not want that in a production database. So always use the WHERE clause to specify the row you want to delete.']},
{'title':'Updating a Database', 'description':'Updating Values in the table', 'content':['So far, you\'ve learnt about SQL Database and how to make some operations such as Creating, Inserting and Deleting Values in an SQL Database.','Now, you\'re about to learn how to Update values in an SQL Database.', 'Updating is simply changing values in the database table. Since we deleted Mark\'s data from the table, we\'re left with Sam\'s data and Kimberly\'s data in the table.','Let\'s say a common human mistake was made while arranging the results and someone else\'s score was given to Kimberly so instead of 72, Kimberly had the score of 83 and you as the school\'s database manager should be able to UPDATE Kimberly\'s score.','Code Example:','Update Results SET Score = 83 Where Name = \'Kimberly\'', 'The code above is self-explanatory, we\'ve used the \'Update\' command next we call the Table name being \'Results\' then we call the \'Set\' command(remember SQL is case-insensitive) and after that, we specify the values to change and since we\'re changing only the score thus \'score = 83\' and we end the query be setting the \'Where\' clause by writing \'Where name = Kimberly\'','Thats what the query above is doing to your database', 'In a situation where you need to update two things at once in a particular row, so if you have to change the name too. Very Easy!','Code Example:','Update Results Set Score = 90, Name = \'Arnold\' Where Id = 2','Again, do not omit the Where clause else all the values in the table will be affected']},
{'title':'Reading from the database', 'description':'Reading/Fetching Values from the database', 'content':['SQL makes it possible to read or fetch values from a database through the use of the \'Select\' command.', 'Code Examples:', 'Select * From Results','This query will bring out all the values in the rows and column of the Results table. But what if we want to fetch some values like the names and scores of each student', 'Code Examples: ','Select Name, Score From Results','The names and scores of all the students will be selected and fetched', 'What if we want to select the name and score of student whose score is greater than 88','Code Example: ', 'Select Name, Score From Results where Score > 88','Just like that, the student whose score is greater than 88 will be selected/fetched.']},
{'title':'Python and SQL', 'description':'Using Python in SQL', 'content':['Things may have seemed vauge especially as you just learnt SQL without actually applying it. Database Management Systems are used is developing and managing a database. SQL is a database querying language and can be used in Database Management Systems such as MYSQL, Oracle, Mongo DB,etc.', 'In this course, we want to write SQL queries using a built-in Python library called \'sqlite\'.', 'This is why a background knowledge in Python is a requirement to continue this course.', 'In Python, the \'sqlite\' library which is a lightweight DBMS enables us to write develop and manage an SQL database.','The things you\'ve learnt earlier are the same things we will apply here but we will add a little Python to it.','Lets create the same students database again and carryout operations on the database. So you\'ll just get to your Python IDE or Code Editor as we continue']},
{'title':'Sqlite','description':'Establish a connection, execute, commit and close','content':['First, you need to import the sqlite library. It is a built-in library so you won\'t need to download it.', 'Next, you need to create a connection to the database. Remember, Python is a programming language so if you\'re gonna use it to develop a database, you need to establish a connection to the database. Don\'t get it twisted it\'s all easy.', 'Code Example:','#import the library','import sqlite','#Establish a connection to the database','conn = sqlite3.connect(\'Student.db\')', 'When creating the connection, you need to create a database file (.db) in your folder. This is the database that you are creating a connection with. So you are basically using Python to communicate with that database file (Student.db).','You can go ahead to create the file or once you write the code, python will automatically create a database file named Student.db.']},
{'title':'Sqlite', 'description':'Establish a connection, execute, commit and close', 'content':['After creating a connection, you need to create a cursor. The cursor is provide by python to be used in passing the SQL queries to the database. First, you need to initialize the cursor like this;','Code Example:','import sqlite','conn = sqlite3.connect(\'Student.db\')','cursor = conn.cursor()', 'cursor.execute(\"Create Table Results(Id Integer, Name Text, Score Integer)\")','conn.commit()','conn.close()','print(\"Database Created Successfully\")','So far, you have initialized the cursor and invoked its execute method where you passed the query to create a \'Results\' table.', 'As you have noticed, the execute method is where you pass the SQL query.','Also take note that you are supposed to run the code above ONLY ONCE because once you run the code, the database and the table will be created and if you try to run it again, you\'ll recieve an Error like below','sqlite3.OperationalError: table Results already exists','This is because sqlite will not allow you to create two tables with the same name to avoid complications when operating on them. So what you need to do is to comment out the line of code that creates the table (line 4) by adding the \'#\' at the start of the line 4 after executing the code once.', 'But note that you can create more than one table with different names in the same database file.','For the code above to work, you need to \'commit\' and \'close\' the connection. If you\'re a github user, you should understand the need to commit changes to some files but in sqlite, you need to commit changes made and close the connection for it to work properly. Please note that it is important to close the connection to free up spaces in production databases otherwise when database connections are left open, it will cause an overload on the server. Thats why its important.', 'The print statement at the end is to give us a confirmation if the database was successfully created.','Thats what the code does.']},
{'title':'Sqlite', 'description':'Dynamic Querying', 'content':['Throughout the course, we have been hard-coding values into our database, now you will learn how to dynamically add values to your database. Observe the code below.', 'Code Example:', 'import sqlite', 'name = input(\"Enter your name: \")', 'age = int(input(\"Enter your age: \"))', 'conn = sqlite3.connect(\"data.db\")', 'cur = conn.cursor()','cur.execute(\"Create Table Details(\'Name Text, Age Integer\')\")','cur.execute(\"Insert into Details VALUES(\':name\', \':age\')\", {\'name\':name, \'age\':age})','cur.execute(\"Select * From Details\")','conn.commit()','data = cur.fetchall()', 'conn.close()','print(data)','','Here\'s an explanation.','In dynamic querying, the values are not hard-coded. We write some code to accept users\' names and their ages. Next, we passed it dynamically to the SQL query by using a special string formatting syntax.','We have also included the \'Select\' command of SQL to see the values in the database. The lines 8 and 10 works hand-in-hand.','Python provides the \'fetchall()\' method to get data from the database and the fetchall() method returns a Python List of all the data in the database grouped as Python Tuples. Don\' t get scared you\'ll understand it.','When you execute the code, you\'ll see that the data variable returns a Python List that contains individual user data (their names and ages) that are grouped into Python Tuples.','Then we commit and close the connection.','Execute the code and try to understand it, try to write it on your own especially the string formatting part and you\'ll get it in no time.']},

{'title':'Recap', 'description':'Lets go back in time','content':["You have come a long way in this SQL course and so far, we have talked about Database and SQL, Writing SQL queries, Working with sqlite, Performed CRUD Operations","C - Create a database", "R - Read from a database","U - Updated a database", "D - Deleted from a database", "Handled dynamic querying" ,"We also made use of the \'fetchall()\' method in Python to output values in the database.","SQL is a lightweight Database Management System and should not be used for complex applications because it cannot handle complex data processing. In those cases, you should go for Postgre SQL, another type of SQL database that can handle complex data operations(check out our PostgreSQL course) or MongoDB.","When using Sqlite, ensure to always encrypt the data before storage. Thats right, its a norm in the developer community to always encrypt user data before storing in your database in case of hacks. So whenever you are working on a production database, try to come up with an encryption model to encrypt your data. An example could be writing the data backwards before storage(not the best but just a mere example)."]},
{'title':'Practice', 'description':'Lets see what you got','content':["Congratulations, you have successfully completed your SQL journey. But remember, \"practice makes perfect\" you will have to practice what you have learnt in this course by building projects.", "We strongly advise you to try and build projects on your own without peeking from anywhere. Only when you\'ve tried and cannot do it, then you can ask for help or google the answer. Googling stuff is a part of programming, thats for sure.", "Try creating a database and perform CRUD operations on them. Keep learning, keep coding."]}
]
  return sql